package Graficas;

import Clases.Buscador;
import Clases.Conexion;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.Date;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import static org.eclipse.persistence.config.ResultType.Map;

public class Puertas extends javax.swing.JFrame {

    PreparedStatement ps = null;
    ResultSet rs = null;
    Conexion conn = new Conexion();

    public Puertas() {
        initComponents();
        this.setTitle("Inventario  de puertas");
        this.setLocationRelativeTo(null);
        
        Image logo = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/img/ranelagh.png"));
        this.setIconImage(logo);
        agregarColumnas1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        cmbFiltro1 = new javax.swing.JComboBox<>();
        cmbFiltro2 = new javax.swing.JComboBox<>();
        txtBuscador2 = new javax.swing.JTextField();
        txtBuscador1 = new javax.swing.JTextField();
        cmbFiltro3 = new javax.swing.JComboBox<>();
        txtBuscador3 = new javax.swing.JTextField();
        cmbFiltro4 = new javax.swing.JComboBox<>();
        txtBuscador4 = new javax.swing.JTextField();
        btnGenerarReporte = new javax.swing.JButton();
        Titulo = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtPuertas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white), "Filtrar por palabra clave", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 18))); // NOI18N

        cmbFiltro1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cmbFiltro1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cliente", "Estado", "Proveedor", "Producto", "Linea", "Modelo", "Hoja", "Marco", "Mano", "Orden", "Fecha Pedido", "Fecha Recibido", "Ubicacion", "Modulo", "Fila", "Observaciones" }));
        cmbFiltro1.setToolTipText("");
        cmbFiltro1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));
        cmbFiltro1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        cmbFiltro1.setName(""); // NOI18N

        cmbFiltro2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cmbFiltro2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cliente", "Estado", "Proveedor", "Producto", "Linea", "Modelo", "Hoja", "Marco", "Mano", "Orden", "Fecha Pedido", "Fecha Recibido", "Ubicacion", "Modulo", "Fila", "Observaciones" }));
        cmbFiltro2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));

        txtBuscador2.setToolTipText("");
        txtBuscador2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscador2KeyReleased(evt);
            }
        });

        txtBuscador1.setToolTipText("");
        txtBuscador1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscador1KeyReleased(evt);
            }
        });

        cmbFiltro3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cmbFiltro3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cliente", "Estado", "Proveedor", "Producto", "Linea", "Modelo", "Hoja", "Marco", "Mano", "Orden", "Fecha Pedido", "Fecha Recibido", "Ubicacion", "Modulo", "Fila", "Observaciones" }));
        cmbFiltro3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));

        txtBuscador3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscador3KeyReleased(evt);
            }
        });

        cmbFiltro4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        cmbFiltro4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cliente", "Estado", "Proveedor", "Producto", "Linea", "Modelo", "Hoja", "Marco", "Mano", "Orden", "Fecha Pedido", "Fecha Recibido", "Ubicacion", "Modulo", "Fila", "Observaciones" }));
        cmbFiltro4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));

        txtBuscador4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscador4KeyReleased(evt);
            }
        });

        btnGenerarReporte.setText("Generar Reporte");
        btnGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarReporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbFiltro1, 0, 180, Short.MAX_VALUE)
                    .addComponent(txtBuscador1, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtBuscador2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(txtBuscador3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(txtBuscador4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbFiltro2, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(cmbFiltro3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(cmbFiltro4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 953, Short.MAX_VALUE)
                .addComponent(btnGenerarReporte)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbFiltro1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFiltro2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbFiltro3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbFiltro4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBuscador1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBuscador2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBuscador3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtBuscador4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnGenerarReporte)
                        .addGap(8, 8, 8))))
        );

        jPanel2.add(jPanel1, java.awt.BorderLayout.CENTER);

        Titulo.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        Titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Titulo.setText("Estado de Stock de puertas");
        Titulo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white, java.awt.Color.white));
        Titulo.setInheritsPopupMenu(false);
        Titulo.setPreferredSize(new java.awt.Dimension(400, 51));
        Titulo.setRequestFocusEnabled(false);
        jPanel2.add(Titulo, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_START);

        jPanel3.setLayout(new java.awt.BorderLayout());
        getContentPane().add(jPanel3, java.awt.BorderLayout.LINE_START);

        jtPuertas.setAutoCreateRowSorter(true);
        jtPuertas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Cliente", "Estado", "Proveedor", "Producto", "Linea", "Modelo", "Hoja", "Marco", "Mano", "Orden", "Fecha Pedido", "Fecha Recibido", "Valor", "Ubicacion", "Modulo", "Fila", "Observaciones"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtPuertas);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Home.puertas = null;// permite cerrar y volver a iniciar el formulario
    }//GEN-LAST:event_formWindowClosing

    private void txtBuscador2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscador2KeyReleased
        /**
         * Filtro sensitivo para buscar por palabras clave combinando con el
         * primer filtro y el segundo filtro
         */
        filtro2();
        agregarColumnas2();
    }//GEN-LAST:event_txtBuscador2KeyReleased

    private void txtBuscador1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscador1KeyReleased
        filtro1();
        agregarColumnas1();
    }//GEN-LAST:event_txtBuscador1KeyReleased

    private void txtBuscador3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscador3KeyReleased
        filtro3();
        agregarColumnas3();
    }//GEN-LAST:event_txtBuscador3KeyReleased

    private void txtBuscador4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscador4KeyReleased
        filtro4();
        agregarColumnas4();
    }//GEN-LAST:event_txtBuscador4KeyReleased

    private void btnGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarReporteActionPerformed
        /**
         * Boton para generar un reporte de todo el inventario de puertas
         * disponibles
         */
        try {
            JasperReport reporte = null;
            String parametro = JOptionPane.showInputDialog("Ingrese el cliente");
            String path = "src\\Reportes\\puertas.jasper";
            Map parametros = new HashMap<String, Object>();
            parametros.put("Par",parametro);
//            parametros.put(cmbFiltro1.getSelectedItem().toString(), txtBuscador1.getText());
//            parametros.put(cmbFiltro2.getSelectedItem().toString(), txtBuscador2.getText());
//            parametros.put(cmbFiltro3.getSelectedItem().toString(), txtBuscador3.getText());
//            parametros.put(cmbFiltro4.getSelectedItem().toString(), txtBuscador4.getText());
         
                            reporte = (JasperReport) JRLoader.loadObjectFromFile(path);
                            JasperPrint jPrint;
                            jPrint = JasperFillManager.fillReport(reporte, parametros, conn.getConexion());
                            JasperViewer view = new JasperViewer(jPrint, false);
                            view.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
                            view.setVisible(true);
           
            
        } catch (JRException e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_btnGenerarReporteActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Puertas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Puertas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Puertas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Puertas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Puertas().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Titulo;
    private javax.swing.JButton btnGenerarReporte;
    private javax.swing.JComboBox<String> cmbFiltro1;
    private javax.swing.JComboBox<String> cmbFiltro2;
    private javax.swing.JComboBox<String> cmbFiltro3;
    private javax.swing.JComboBox<String> cmbFiltro4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtPuertas;
    private javax.swing.JTextField txtBuscador1;
    private javax.swing.JTextField txtBuscador2;
    private javax.swing.JTextField txtBuscador3;
    private javax.swing.JTextField txtBuscador4;
    // End of variables declaration//GEN-END:variables
    /**
     * Filtro sensitivo 1
     *
     * @return devuelve un string con lo que va a buscar el textfield, actua
     * como un filtro dinamico
    **/
    public String filtro1() {
        String filtro = Buscador.filtroCondicional() + cmbFiltro1.getSelectedItem().toString() + " LIKE '" + txtBuscador1.getText() + "%'";
        return filtro;
    }

    /**
     * filtro sensitvo 2
     *
     * @return devuelve un string con lo que va a buscar el textfield, actua
     * como un filtro dinamico
     */
    public String filtro2() {
        return filtro1() + " and " + cmbFiltro2.getSelectedItem().toString() + " LIKE '" + txtBuscador2.getText() + "%'";
    }

    /**
     * filtro sensitivo 3
     *
     * @return devuelve un string con lo que va a buscar el textfield, actua
     * como un filtro dinamico
     */
    public String filtro3() {
        return filtro2() + " and " + cmbFiltro3.getSelectedItem().toString() + " LIKE '" + txtBuscador3.getText() + "%'";
    }

    /**
     * filtro sensitivo 4
     *
     * @return devuelve un string con lo que va a buscar el textfield, actua
     * como un filtro dinamico
     */
    public String filtro4() {
        return filtro3() + " and " + cmbFiltro4.getSelectedItem().toString() + " LIKE '" + txtBuscador4.getText() + "%'";
    }

    /**
     * funcion que agregar las columnas al priomer filtro sensitivo
     */
    public final void agregarColumnas1() {
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            jtPuertas.setModel(modelo);
            Connection con = conn.getConexion();
            ps = con.prepareStatement(filtro2());
            rs = ps.executeQuery();

            ResultSetMetaData rsMd = rs.getMetaData();
            int cantColumnas = rsMd.getColumnCount();//contar columnas
            modelo.addColumn("Cliente");
            modelo.addColumn("Estado");
            modelo.addColumn("Proveedor");
            modelo.addColumn("Producto");
            modelo.addColumn("Linea");
            modelo.addColumn("Modelo");
            modelo.addColumn("Hoja");
            modelo.addColumn("Marco");
            modelo.addColumn("Mano");
            modelo.addColumn("Orden");
            modelo.addColumn("Fecha Pedido");
            modelo.addColumn("Fecha Recibido");
            modelo.addColumn("Valor");
            modelo.addColumn("Ubicacion");
            modelo.addColumn("Modulo");
            modelo.addColumn("Fila");
            modelo.addColumn("Observaciones");
            while (rs.next()) {
                Object[] filas = new Object[cantColumnas];
                for (int i = 0; i < cantColumnas; i++) {
                    filas[i] = rs.getObject(i + 1);
                }
                modelo.addRow(filas);
            }

        } catch (SQLException e) {
            System.out.println(e.toString());
        }
    }

    /**
     * funcion para agregar las columnas al segundo filtro sensitivo
     */
    public final void agregarColumnas2() {
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            jtPuertas.setModel(modelo);
            Connection con = conn.getConexion();
            ps = con.prepareStatement(filtro2());
            rs = ps.executeQuery();

            ResultSetMetaData rsMd = rs.getMetaData();
            int cantColumnas = rsMd.getColumnCount();//contar columnas
            modelo.addColumn("Cliente");
            modelo.addColumn("Estado");
            modelo.addColumn("Proveedor");
            modelo.addColumn("Producto");
            modelo.addColumn("Linea");
            modelo.addColumn("Modelo");
            modelo.addColumn("Hoja");
            modelo.addColumn("Marco");
            modelo.addColumn("Mano");
            modelo.addColumn("Orden");
            modelo.addColumn("Fecha Pedido");
            modelo.addColumn("Fecha Recibido");
            modelo.addColumn("Valor");
            modelo.addColumn("Ubicacion");
            modelo.addColumn("Modulo");
            modelo.addColumn("Fila");
            modelo.addColumn("Observaciones");
            while (rs.next()) {
                Object[] filas = new Object[cantColumnas];
                for (int i = 0; i < cantColumnas; i++) {
                    filas[i] = rs.getObject(i + 1);
                }
                modelo.addRow(filas);
            }

        } catch (SQLException e) {
            System.out.println(e.toString());
        }
    }
    /**
     * funcion para agregar las columnas al tercer filtro sensitivo
     */
    public final void agregarColumnas3() {
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            jtPuertas.setModel(modelo);
            Connection con = conn.getConexion();
            ps = con.prepareStatement(filtro3());
            rs = ps.executeQuery();

            ResultSetMetaData rsMd = rs.getMetaData();
            int cantColumnas = rsMd.getColumnCount();//contar columnas
            modelo.addColumn("Cliente");
            modelo.addColumn("Estado");
            modelo.addColumn("Proveedor");
            modelo.addColumn("Producto");
            modelo.addColumn("Linea");
            modelo.addColumn("Modelo");
            modelo.addColumn("Hoja");
            modelo.addColumn("Marco");
            modelo.addColumn("Mano");
            modelo.addColumn("Orden");
            modelo.addColumn("Fecha Pedido");
            modelo.addColumn("Fecha Recibido");
            modelo.addColumn("Valor");
            modelo.addColumn("Ubicacion");
            modelo.addColumn("Modulo");
            modelo.addColumn("Fila");
            modelo.addColumn("Observaciones");
            while (rs.next()) {
                Object[] filas = new Object[cantColumnas];
                for (int i = 0; i < cantColumnas; i++) {
                    filas[i] = rs.getObject(i + 1);
                }
                modelo.addRow(filas);
            }

        } catch (SQLException e) {
            System.out.println(e.toString());
        }
    }
    /**
     * funcion para agregar las columnas al cuarto filtro sensitivo
     */
    public final void agregarColumnas4() {
        try {
            DefaultTableModel modelo = new DefaultTableModel();
            jtPuertas.setModel(modelo);
            Connection con = conn.getConexion();
            ps = con.prepareStatement(filtro4());
            rs = ps.executeQuery();

            ResultSetMetaData rsMd = rs.getMetaData();
            int cantColumnas = rsMd.getColumnCount();//contar columnas
            modelo.addColumn("Cliente");
            modelo.addColumn("Estado");
            modelo.addColumn("Proveedor");
            modelo.addColumn("Producto");
            modelo.addColumn("Linea");
            modelo.addColumn("Modelo");
            modelo.addColumn("Hoja");
            modelo.addColumn("Marco");
            modelo.addColumn("Mano");
            modelo.addColumn("Orden");
            modelo.addColumn("Fecha Pedido");
            modelo.addColumn("Fecha Recibido");
            modelo.addColumn("Valor");
            modelo.addColumn("Ubicacion");
            modelo.addColumn("Modulo");
            modelo.addColumn("Fila");
            modelo.addColumn("Observaciones");
            while (rs.next()) {
                Object[] filas = new Object[cantColumnas];
                for (int i = 0; i < cantColumnas; i++) {
                    filas[i] = rs.getObject(i + 1);
                }
                modelo.addRow(filas);
            }

        } catch (SQLException e) {
            System.out.println(e.toString());
        }
    }
}
